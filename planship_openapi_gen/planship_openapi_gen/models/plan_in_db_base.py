# coding: utf-8

"""
    Planship API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from planship_openapi_gen.models.time_units import TimeUnits

class PlanInDbBase(BaseModel):
    """
    PlanInDbBase
    """
    slug: StrictStr = Field(...)
    display_order: Optional[StrictInt] = None
    display_name: Optional[StrictStr] = ''
    display_description: Optional[StrictStr] = ''
    display_extra_attributes: Optional[Dict[str, StrictStr]] = None
    description: Optional[StrictStr] = ''
    name: StrictStr = Field(...)
    max_subscribers: Optional[StrictInt] = 1
    is_self_serve: Optional[StrictBool] = True
    is_public: Optional[StrictBool] = False
    auto_renew: Optional[StrictBool] = True
    duration_period: Optional[StrictInt] = 1
    duration_unit: Optional[TimeUnits] = None
    id: StrictStr = Field(...)
    __properties = ["slug", "display_order", "display_name", "display_description", "display_extra_attributes", "description", "name", "max_subscribers", "is_self_serve", "is_public", "auto_renew", "duration_period", "duration_unit", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanInDbBase:
        """Create an instance of PlanInDbBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanInDbBase:
        """Create an instance of PlanInDbBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanInDbBase.parse_obj(obj)

        _obj = PlanInDbBase.parse_obj({
            "slug": obj.get("slug"),
            "display_order": obj.get("display_order"),
            "display_name": obj.get("display_name") if obj.get("display_name") is not None else '',
            "display_description": obj.get("display_description") if obj.get("display_description") is not None else '',
            "display_extra_attributes": obj.get("display_extra_attributes"),
            "description": obj.get("description") if obj.get("description") is not None else '',
            "name": obj.get("name"),
            "max_subscribers": obj.get("max_subscribers") if obj.get("max_subscribers") is not None else 1,
            "is_self_serve": obj.get("is_self_serve") if obj.get("is_self_serve") is not None else True,
            "is_public": obj.get("is_public") if obj.get("is_public") is not None else False,
            "auto_renew": obj.get("auto_renew") if obj.get("auto_renew") is not None else True,
            "duration_period": obj.get("duration_period") if obj.get("duration_period") is not None else 1,
            "duration_unit": obj.get("duration_unit"),
            "id": obj.get("id")
        })
        return _obj


