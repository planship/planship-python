# coding: utf-8

"""
    Planship API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class MeteringRecord(BaseModel):
    """
    MeteringRecord
    """
    id: StrictStr = Field(...)
    is_allocated: Optional[StrictBool] = False
    usage: StrictInt = Field(...)
    metering_id: StrictStr = Field(...)
    customer_id: StrictStr = Field(...)
    product_id: StrictStr = Field(...)
    subscription_id: Optional[StrictStr] = None
    bucket: Optional[StrictStr] = None
    __properties = ["id", "is_allocated", "usage", "metering_id", "customer_id", "product_id", "subscription_id", "bucket"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeteringRecord:
        """Create an instance of MeteringRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeteringRecord:
        """Create an instance of MeteringRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MeteringRecord.parse_obj(obj)

        _obj = MeteringRecord.parse_obj({
            "id": obj.get("id"),
            "is_allocated": obj.get("is_allocated") if obj.get("is_allocated") is not None else False,
            "usage": obj.get("usage"),
            "metering_id": obj.get("metering_id"),
            "customer_id": obj.get("customer_id"),
            "product_id": obj.get("product_id"),
            "subscription_id": obj.get("subscription_id"),
            "bucket": obj.get("bucket")
        })
        return _obj


