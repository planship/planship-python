# coding: utf-8

"""
    Planship API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr

class SubscriptionUpdateWithSlugs(BaseModel):
    """
    SubscriptionUpdateWithSlugs
    """
    plan_id: Optional[StrictStr] = None
    renew_plan_id: Optional[StrictStr] = None
    plan_slug: Optional[StrictStr] = None
    renew_plan_slug: Optional[StrictStr] = None
    max_subscribers: Optional[StrictInt] = 1
    is_active: Optional[StrictBool] = True
    auto_renew: Optional[StrictBool] = None
    renew_at: Optional[datetime] = None
    __properties = ["plan_id", "renew_plan_id", "plan_slug", "renew_plan_slug", "max_subscribers", "is_active", "auto_renew", "renew_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionUpdateWithSlugs:
        """Create an instance of SubscriptionUpdateWithSlugs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionUpdateWithSlugs:
        """Create an instance of SubscriptionUpdateWithSlugs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionUpdateWithSlugs.parse_obj(obj)

        _obj = SubscriptionUpdateWithSlugs.parse_obj({
            "plan_id": obj.get("plan_id"),
            "renew_plan_id": obj.get("renew_plan_id"),
            "plan_slug": obj.get("plan_slug"),
            "renew_plan_slug": obj.get("renew_plan_slug"),
            "max_subscribers": obj.get("max_subscribers") if obj.get("max_subscribers") is not None else 1,
            "is_active": obj.get("is_active") if obj.get("is_active") is not None else True,
            "auto_renew": obj.get("auto_renew"),
            "renew_at": obj.get("renew_at")
        })
        return _obj


