# coding: utf-8

"""
    Planship API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List
from pydantic import BaseModel, Field, StrictInt, conlist
from planship_openapi_gen.models.bucket_usage import BucketUsage

class LeverUsage(BaseModel):
    """
    LeverUsage
    """
    total: StrictInt = Field(...)
    by_bucket: Dict[str, StrictInt] = Field(...)
    by_subscription: Dict[str, conlist(BucketUsage)] = Field(...)
    __properties = ["total", "by_bucket", "by_subscription"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LeverUsage:
        """Create an instance of LeverUsage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in by_subscription (dict of array)
        _field_dict_of_array = {}
        if self.by_subscription:
            for _key in self.by_subscription:
                if self.by_subscription[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.by_subscription[_key]
                    ]
            _dict['by_subscription'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LeverUsage:
        """Create an instance of LeverUsage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LeverUsage.parse_obj(obj)

        _obj = LeverUsage.parse_obj({
            "total": obj.get("total"),
            "by_bucket": obj.get("by_bucket"),
            "by_subscription": dict(
                (_k,
                        [BucketUsage.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("by_subscription").items()
            )
        })
        return _obj


