# coding: utf-8

"""
    Planship API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class PlanSubscriptionCreate(BaseModel):
    """
    PlanSubscriptionCreate
    """
    metadata: Optional[Dict[str, Any]] = None
    customer_id: StrictStr = Field(...)
    is_subscriber: Optional[StrictBool] = True
    max_subscribers: Optional[StrictInt] = 1
    renew_at: Optional[datetime] = None
    auto_renew: Optional[StrictBool] = None
    __properties = ["metadata", "customer_id", "is_subscriber", "max_subscribers", "renew_at", "auto_renew"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanSubscriptionCreate:
        """Create an instance of PlanSubscriptionCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanSubscriptionCreate:
        """Create an instance of PlanSubscriptionCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanSubscriptionCreate.parse_obj(obj)

        _obj = PlanSubscriptionCreate.parse_obj({
            "metadata": obj.get("metadata"),
            "customer_id": obj.get("customer_id"),
            "is_subscriber": obj.get("is_subscriber") if obj.get("is_subscriber") is not None else True,
            "max_subscribers": obj.get("max_subscribers") if obj.get("max_subscribers") is not None else 1,
            "renew_at": obj.get("renew_at"),
            "auto_renew": obj.get("auto_renew")
        })
        return _obj


