# coding: utf-8

"""
    Planship API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class Lever(BaseModel):
    """
    Lever
    """
    slug: StrictStr = Field(...)
    id: StrictStr = Field(...)
    display_order: Optional[StrictInt] = None
    display_name: Optional[StrictStr] = ''
    display_description: Optional[StrictStr] = ''
    display_extra_attributes: Optional[Dict[str, StrictStr]] = None
    configuration: Optional[Dict[str, Any]] = None
    description: Optional[StrictStr] = ''
    name: StrictStr = Field(...)
    entitlement_display_value_template: Optional[StrictStr] = ''
    entitlement_display_name_template: Optional[StrictStr] = ''
    entitlement_display_description_template: Optional[StrictStr] = ''
    lever_type_id: StrictStr = Field(...)
    product_id: StrictStr = Field(...)
    metering_ids: conlist(StrictStr) = Field(...)
    entitlement_schema_json: Optional[Dict[str, Any]] = None
    __properties = ["slug", "id", "display_order", "display_name", "display_description", "display_extra_attributes", "configuration", "description", "name", "entitlement_display_value_template", "entitlement_display_name_template", "entitlement_display_description_template", "lever_type_id", "product_id", "metering_ids", "entitlement_schema_json"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Lever:
        """Create an instance of Lever from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Lever:
        """Create an instance of Lever from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Lever.parse_obj(obj)

        _obj = Lever.parse_obj({
            "slug": obj.get("slug"),
            "id": obj.get("id"),
            "display_order": obj.get("display_order"),
            "display_name": obj.get("display_name") if obj.get("display_name") is not None else '',
            "display_description": obj.get("display_description") if obj.get("display_description") is not None else '',
            "display_extra_attributes": obj.get("display_extra_attributes"),
            "configuration": obj.get("configuration"),
            "description": obj.get("description") if obj.get("description") is not None else '',
            "name": obj.get("name"),
            "entitlement_display_value_template": obj.get("entitlement_display_value_template") if obj.get("entitlement_display_value_template") is not None else '',
            "entitlement_display_name_template": obj.get("entitlement_display_name_template") if obj.get("entitlement_display_name_template") is not None else '',
            "entitlement_display_description_template": obj.get("entitlement_display_description_template") if obj.get("entitlement_display_description_template") is not None else '',
            "lever_type_id": obj.get("lever_type_id"),
            "product_id": obj.get("product_id"),
            "metering_ids": obj.get("metering_ids"),
            "entitlement_schema_json": obj.get("entitlement_schema_json")
        })
        return _obj


