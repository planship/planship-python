# coding: utf-8

"""
    Planship API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from planship_openapi_gen.models.subscription_customer import SubscriptionCustomer

class Customer(BaseModel):
    """
    Customer
    """
    id: StrictStr = Field(...)
    metadata_: Optional[Dict[str, Any]] = None
    name: Optional[StrictStr] = ''
    email: Optional[StrictStr] = ''
    alternative_id: Optional[StrictStr] = None
    organization_id: StrictStr = Field(...)
    subscriptions: conlist(SubscriptionCustomer) = Field(...)
    __properties = ["id", "metadata_", "name", "email", "alternative_id", "organization_id", "subscriptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Customer:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Customer:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Customer.parse_obj(obj)

        _obj = Customer.parse_obj({
            "id": obj.get("id"),
            "metadata_": obj.get("metadata_"),
            "name": obj.get("name") if obj.get("name") is not None else '',
            "email": obj.get("email") if obj.get("email") is not None else '',
            "alternative_id": obj.get("alternative_id"),
            "organization_id": obj.get("organization_id"),
            "subscriptions": [SubscriptionCustomer.from_dict(_item) for _item in obj.get("subscriptions")] if obj.get("subscriptions") is not None else None
        })
        return _obj


